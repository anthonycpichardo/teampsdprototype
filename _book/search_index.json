[
["index.html", "Team PSD Manual Chapter 1 Preface", " Team PSD Manual Team PSD 2020-07-21 Chapter 1 Preface Welcome to your Bookdown The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;, &quot;HelpersMG&quot;, &quot;readr&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) "],
["2-teampsd-guiding-principles.html", "Chapter 2 TeamPSD Guiding Principles", " Chapter 2 TeamPSD Guiding Principles 2.0.1 1. We value an open-source, transparent &amp; reproducible workflow. Most of our work is public-facing with the exception of any items that include Protected Health Information (PHI) or Personally Identifiable Information (PII). All of our public materials are free to download and use. We want our insights and resources to benefit the larger community. We use R, a free open-source coding language and a specific file naming convention to ensure all of our matierals are machine &amp; human readable (all lower case, no spaces, with dates as yyyy_mm_dd i.e. teampsd_guiding_principles_2020_01_01). Use email for any private discussions. Host any private files in password-protected locations or in folders behind the VA firewall. When in doubt, ask an HQ member or err on the side of caution. Make sure your work and accompanying documentation allows other team members or scientists in the field to reproduce and understand your work without further questions. 2.0.2 2. Our work has high visibility. Keep in mind we work under the federal government of the United States for the Veterans Health Administration (VHA), the largest integrated healthcare system in the country. Everything we produce is a reflection of the VHA. We work with a wide range of nationally-distributed partners both internal and external to VA, including very important and high-level stakeholders. Double check the role and responsibility of people you are communicating with before you do. With these partners, we work in a participatory learning manner and iterate based on feedback from the field to ensure our work is responsive to ongoing changes. 2.0.3 3. Any time saved is team time. Ask questions early and often to prevent escalating issues down the road. Refer to existing resources (cheatsheets, checklists, etc.) as well for clarification. Double check all work before handing it off to the next team member to reduce rework. Think through dependencies across the team and partners and prioritize work based on the most recent information you have. Manage workflow asynchronously (via GitHub) and only schedule meetings when absolutely necessary. 2.0.4 4. Use effective communication (across all types of communication including emails, GitHub, Lucid, etc.). Assume everyone you’re communicating with is smarter than you and cares more than you and is busier than you. Use clear and concise language, with formatting (bold, underline, bullets, etc) to emphasize the main decisions or issues making sure to include the “Who” “What” and “When”. Always include the full context and details necessary to make an informed decision (and make sure you are up to speed on the context and details before responding). Use complete sentences as much as possible and write in the active voice for clarity Often the team looks back to previous records of meetings, GitHub discussions, etc. to remember and track decisions that were already made or if they missed the meetings where an issue may have been discussed. As such, we always need to keep the most accurate record possible to reduce rework and provide clarity. Use emojis or humor (as appropriate) to help maintain a positive and collegial vibe. Turn on your webcam as much as possible for the face-to-face interaction. 2.0.5 5. Use active listening skills to ensure understanding and accurate tracking. We work daily with team members and partners that are experts in their respective fields, and it is easy to lose track of a complex discussion. We’ve found that reflecting-back requests and decisions in your own words has been the best method to reduce miscommunication and to keep track of all of our decisions or issues accurately. If you ever need help while scribing, always “tap” someone else on the team for assistance. Ask for clarification and slow down if necessary. "],
["3-teampsd-design-workshop-manual.html", "Chapter 3 TeamPSD Design Workshop Manual 3.1 Day 1: Design Thinking 3.2 Day 2: Team PSD Manual Workshop Artifacts 3.3 Day 3: Persona Prototypes 3.4 Day 4: Team PSD 2.0 3.5 Day 5: Team PSD Personas and Minimum Viable Products (MVPs)", " Chapter 3 TeamPSD Design Workshop Manual 3.1 Day 1: Design Thinking Design Thinking - Team PSD Manual (and all that it includes): Using Good UX (user-experience) Design… The Sciences of the Artificial, Herbert Simon Hasso-Plattner Institute of Design at Stanford (d.school). Using resources from the non-profit Interaction Design foundation (interaction-design.org) 3.1.1 1. Empathize - To gain an empathic understanding of the need or problem you are trying to solve in terms of people, processes that set aside individual assumptions to get insight into the need. What? Details of what to do (what happened). This is when we analyze observe and document details that relate to users. How? How the person does it (effort, etc.) Why? Motivations/purpose (test this out…) Exercises for assumptions (remember: everything is a perspective): List assumptions Ask: How could this not be true? Ask: What if we could do this twice as well in half the time? 3.1.2 2. Define the problem - This is when we synthesize observations into holistic point of view (POV). Goal is to make linkages, so that we define the right problem to address. [Example POV: Busy, nationally distributed, cross-functional team of scientists has many partners, is about to hire more people, leads a national participatory system dynamics simulation learning program in, and is gaining increasing national and international interest in partnership HMW…] 2a. A problem statement: Focuses on Specific peopleʼs needs (not the technology or specs), Value and insights for the project (not the technical requirements), yet it is… …narrow enough to be managed within our constraints Exercises for definitions with how-why/why-how laddering (a variant of 5 whys principle): Asking “Why?” Explores to understand root causes (abstract, more common across people) …then “How might we?” to get to a specific problem/challenge we can solve (concrete) Part I - The HMW Brainstorm…HMW use the efficiency of GitHub [good] remove the [bad] steep learning curve integrate with existing GH norms the best part [explore the opposite] remove reliance on training [question the assumption] go after adjectives [make it easy, instead of hard] use code instead of by hand [leverage unexpected resource] enable self-directed learning like “Googling” [analogy from need/context] attract help from Forio, MITRE, VA to solve this [shift POV against the challenge] get it up and running now [shift a status quo] divvy up chunks for each workgroup [break up POV] Part II “Why do we need to integrate our manuals, workflows and processes on GitHub to achieve Team PSD values? (if start with Why, phrase as a need and make it meaningful.” Because… “How do we use manuals, workflows and process on GitHub now?” [describe] “Why?” “Why?” What what was most surprising? What would we have missed if we hadnʼt asked why? 3.1.3 3. Ideate - Expand the problem space by identifying and testing out elements that would circumvent problems. time-limit quantity over quality no distractions no bad ideas Part I. SCAMPER - Review our existing Team PSD workgroups/workflow (SOP), platform &amp; processes, resources and review them through seven lenses. Substitute to improve - Can I substitute (replace) people, rules, names, processes? Combine to achieve something different - Can I merge, maximize…? Adapt to solve it - Which part could change? Which context could change? Modify (Magnify and Minify) - Can emphasize, add, grow, tone down…? Put to another use - Could X, Y, Z person use it? Who else? How else could it be used? Eliminate - What would happen if we trim, narrow, reduce, effort, time, costs, rules? I can eliminate X by… Reverse (rearrange) - What if this process was reverse? Could we change the schedule or pace? Do any answers stand out as viable solutions? Part II. Worst possible idea. Come up with as many bad ideas as we can. List all the properties of the bad ideas. List what is it that makes these ideas bad. Search for the opposite of the worst attribute. Mix/match and substitute bad ideas to see what happens. Part III. Exercises using Personas to distill essences of each [Team PSD Manual] user type, who they are and what they do with the relevant resources in relevant contexts. The goal mapping usersʼ needs to design functionality. Based on observation of real users. Shaped iteratively by defining needs AND users. Context: How will this help in context? Goal: Goal-directed personaʼs enable good tests. Role: Role-directed perspective. Hypothesis: Description: values, interests, education, needs, attitudes, desires, limitations, goals Situations/scenarios: put the user in contexts with problems to overcome. Key idea is to avoid designing for yourself only, or designing and forcing generic users to fit the design. Stay in context: How will a team member use it during typical Team PSD day? Reflect real behaviors: What does a Team PSD member have to do? Has an end goal: What does a Team PSD member want to achieve? Addresses a pain point: What is the hardest/most frustrating aspect of the situation/context? 3.1.4 4. Prototype - inexpensive, scaled down version with the key features to investigate the problem and solution. Goal is to identify the best possible solution. Solutions are investigated, accepted, improved, re-examined, rejected based on user-experiences. Should give much better sense sense of constraints and how users would behave, think, and feels when interaction with it. 3.1.5 5. Test - test your prototype with the personas in question. Does the prototype address the personas needs and pain points? 3.2 Day 2: Team PSD Manual Workshop Artifacts “Gandy Dancers” process for building the railroads Used song to lay and adjust track and build the railroads. We are working to develop our Team PSD processes (song) for building our railroad (not building the track), our processes and platforms for building. Like a song, it should keep us in time w/one another and feel good! In this metaphor, the “train” is our mission to improve care for Veterans. We will have to learn to better use our platform to support this mission. Takeaway: We want our platform to support a reliable way of working together (picture those hammers!) GitHub will continue to be our song (platform) for building our railroad because learning to use its standards will scale. Learning: Some team members are “unlearning,” some “relearning,” and others just “learning” the GitHub platform. Fortunately, all team members have experience learning new platforms to do their work. It is already standard and used by these current partners: VA Forio System Dynamicists (e.g., James Houghton &amp; Jim Duggan) used by these potential partners: MITRE Google GitHub is already Team PSDʼs standard, used for 3 years. we know how to use .md we know how to set up README.md files we know how to use and review pull requests we know how to complete issue templates we know how to track and review ZenHub reports we know how to use GitHub more broadly to develop features we know how to use GitHub more broadly to Our Team PSD “Works in Progress” repository will be the manual (SOP) for how to contribute to Team PSD. Why? No change: The Team PSD repo already is our manual. Change: We are not [yet] configured to use this repo across the team to meet all team members [userʼs] needs at our growing scale. 45 team members and partners…and growing… How? GOAL: Keep an eye on “pain points” associated with lack of scale Metaphor for this goal: We cannot simply “make a table,” when what we need is scalable way for any Team PSD partner to contribute to making of tables that scale. DIMENSIONS of our PROBLEM OF SCALE: Team: Shared understanding and language is harder to maintain as we grow beyond our founding team. Partners: Joining the team is harder unless we use existing standards. Platforms: Maintaining quality in production is hard to maintain relying solely on individual peopleʼs disciplined adherence to an SOP. Production: Constant change is the norm and improvement desirable, but hard without means for continuous integration. Q &amp; A Q: What is continuous integration? A: Merging all working copies into master several times a day. Q: How cool, but donʼt we already do that? A: Yes! So we are very close, hereʼs what weʼre missing: We are relying on people to provide rapid feedback about defects in our code base, so that they can be identified and corrected ASAP (itʼs not that fun, is it?). A &amp; Q. No. So what would be different if we used continuous integration on our Team PSD Repo? A: We will use more of GitHubʼs native (&amp;/or integrated) tools to automate testing and build our documentation. These are two things we probably spend over 80% of team time doing by hand… So, when thereʼs a missed dependency, which inevitable, because we still struggle to do better than discover this by hand…that leads to rework, it hurts!!! Our SOPʼs reliance on people leads to social friction, where there could be intellectual friction supported by the right tools. OBSERVATIONS that led to this Workshop: e.g., If all team members need to achieve Jamesʼ level of discipline, our SOP doesnʼt scale. e.g., If we all to scan the horizon to identify dependencies that our GitHub, ZenHub, Workgroup Leads, Workgroup and huddles still just didnʼt catch, then our SOP doesnʼt scale. e.g., If we read through a list of well-specified requirements using the exact same words (e.g., “parser,” “database processes”) and donʼt realize weʼre not speaking the same language, then our SOP doesnʼt scale. e.g., If the ask is to create the standard rules for .md files for other team memberʼs to use and we still donʼt understand each other without substantial revision and meeting support, then our SOP doesnʼt scale. e.g., If direct dependency intervention from the PI is insufficient for alignment when well-discussed, and well-documented across several meetings and huddles, then our…SOP…doesnʼt…scale… e.g., If it takes the team, up to four team members working full time, at any given time to produce the necessary documentation of the changes we made months ago, then our SOP doesnʼt scale. Ouch! UPGRADING OUR INDIVIDUAL MENTAL MODELS Assumptions about Team PSDʼs need for an improved way of building our railroad through GitHub, we could… OUR SHARED VISION: Update all the files on Team PSD with a key stroke. Test scripts instead of use checklists. Shared (team) or even universal (global) language so that we all envision the exact same thing. Integrate data processes, so weʼre sure about it, including any changes. 5. Provide seamless transparency to a whole range of people (and our several team member), rather than do it by “brute force.” Facilitate (empower) checking against standards. Manage change through consistent process. HOW? How might we (HMW) address our pain points? Learn how to do my job differently on GitHub. Focus on the benefits of learning how to better use GitHub as a tool for our purpose. Discover and flex GitHub capabilities to scale the “SOP.” Develop empathic understanding of each Team PSD memberʼs needs. Use shared language so that new changes work for current team members [aka: “users” of the Team PSD repo]. Recruit new team members and partners with GitHub fluency. Remember that we have all learned new platforms before. Learn from more skilled GitHub “been-to” team members. Automate using complete repository configuration. Key to avoiding Potemkin Village: Remember our “users” here are Team PSD Members and Partners, not Modeling to Learn learners. A Potemkin Village is construction whose purpose is to provide an external facade to hide the fact that its faring poorly. We are NOT a Potemkin Village: Partners are SO impressed with what we have done making Modeling to Learn achieve our 3 participatory principles at scale: Equitable access to resources Mutual learning Shared decision-making This is what attracts people to us and makes us stand out the most! However, it is ironic to these partners that we are not fully using GitHub for some of itʼs primary purposes: Accessible collaboration tools for parallel management of Tasks b.Code Shared platform for streamlined iterative change (version control): tracking control testing Support for all programming languages. Easy open source contributions from the community. Documentation. A REALLY KEY IDEA: Consistent with our Team PSD values, we came to our need for GitHub organically. We are further growing into our need for it as a team. Tech people, who live and breathe GitHub. Modelers, who live and breathe their models, all want to know how we got to Modeling to Learn? It is impressive they say. I say, “We started with the values and the partnerships and we learned what was needed.” I describe the participatory system dynamics processes we integrated with cutting edge technology, guided by our values to partner with our frontline providers, Veteran patient advisory board, and senior VA stakeholders over the last five years. We have added two new team members who have experience with the types of enterprise or production level platform we need to optimize our Team PSD skills at scale. Consistent with their Team PSD roles and responsibilities, and their own pain points, they will help the team set up these workflows. We will learn this together. Our mission and values require it of us. We rebooting our “user” focus to Team PSD. Team PSD optimization, not Modeling to Learn optimization. 35 Active Listening Highlights: Our individual Team PSD Repo users - whys? (Teams notes) automation “seeing” how things are used accessibility transparency to others across technology, data sources, model services, and the UI responsive to multiple change authorities testable automatically donʼt have to hold things in our heads dependencies obvious trusted set of processes we do simpler than a bunch of rules minimal change in day to day work for average user automated crosswalk for whether content is correct unnecessary processes eliminated less dependent on learning it all less dependent on history with the team less reliant on meetings (and we still canʼt see it) less reliant on memory robust to real-time change living document that is always current dependency scan to align across standards for the sim, model, guides data on the backend of things is available can see intermediate steps in the data wonʼt waste time because we can see the state of the data save time, over time, by “googling” the information yourself we can change documents (documentation) at scale enable independent, effective contributions set up platforms so partners can flex their strong suits remove weak spots in current processes/GH use version control learn to use tools for what they are meant to do develop skill set to use the correct tool for the job reduced difficult with the platform will maximize contributions technology will support our relationships with everyone strong relationships with everyone is our “core brand.” 3.3 Day 3: Persona Prototypes Summary of Artifacts from Empathesize, Define, Ideate Part I. Position Descriptions (P.D.ʼs): What did everyone notice from highlighting their roles/responsibilities in their P.D. for coordination/collaboration/communication? Problem Statement from our user POV - Our pain points are because Team PSD doesnʼt scale (empathy). Define: IMPROVE INTEGRATION for SIMPLICITY: As with all software and technology development, there will be constant change! So, our processes need to be more fully integrated with GitHub standards, otherwise we canʼt effectively collaborate at scale, or support our resources at scale, or contribute open-science. FOR A RESEARCH TEAM, HOW WE SPEND OUR TIME IS NOT OPTIMAL: We focus too much time supporting MTL in production, not enough time supporting Team PSD contributions to science. USE THE RIGHT TOOLS FOR THE JOB: Right now, we rely on peopleʼs discipline and consistency with protocols…and we are doing our best! But, we should be relying standard coding workflows designed for cross-functional team contributions and transparency. CURRENT TEAM IS CONSTRAINED BY NEED FOR “UPSKILLING:” Micro-level: The process of individual team members learning new skills. Macro-level: Tectonic shift in the workplace caused by technology in which new possibilities can be fully realized only by a modernized workforce. Take a second look at your P.D. - What if you take a look at it now for platforms? Moving from our ideation personas to our first prototype tests: Proposed Prototype: Continuous Integration (CI), deployment (CD), and documentation on GitHub. Consider ways in which upskilling to include CI/CD would help you more fully flex your Team PSD role and responsibilities. Donʼt just consider the mental model that you have of a typical day when testing (AS IS) only…weʼre trying to map to our desired “dream team” state… So, review your P.D. and consider your “TO BE” state in which you had everything you needed to fulfill your role and responsibilities, but would need to learn new skills. Part II. PROTOTYPE Testing with our Team PSD “user” PERSONAS Wednesday - Review at 3PM or 10AM Thursday A. PERSONAS:We developed 6 Team PSD user personas: Sim UI/Model Developer (James) Quant Data Engineer/SQL Programmer (Ash) Quant Analyst/Technical Writer (Anthony) HQ Platform Manager (Stacey) HQ Research Assistant (Jenn) NOTE: We are Missing Personas for key Part-Time Team Members by Role (most effective workgroup to partner): Mentee (e.g., Alexandra?) - HQ Qual (e.g., Kathryn?) - HQ Co-I (e.g., Rachel or Shannon?) - Quant pay attention to… Facilitator/Educator (e.g., Jane or Debbie?) - Sim UI/Model PROTOTYPE TESTING with User Cognitive Interview B. PROTOTYPES: We are completing the first 3 GitHub Lab Trainings on #1220 as Team PSD “users:” GitHub Apps (~ 1 hr) - automate repetitive tasks GitHub Actions (~2 hrs) - templates workflow with testing GitHub Packages (~30 minutes) - continuous deployment Part III. TESTING METHOD: COGNITIVE INTERVIEW (Can you use transcription to “walk through” outload? - consider your eyes, mouse, clicks, thoughts, feelings and search behaviors) - We are interviewing ourselves about two things the training and the tools. A. TEST 1: Can I (as this user-persona) use this GitHub training to learn how to use this? How am I using this training? What do you mean? What do I understand? What is confusing? What is frustrating? Why? What else did I (or would I) need to look up or check to understand this? How much more training will I need to implement this? How much help will I need to implement this for my own needs? How do I feel? Do I like this? Is this realistic? Why is this an important user test of the native GitHub Continuous Integration Prototype? The more Team PSD enlists existing native GitHub capabilities: The easier it will be to onboard new team members, because New team members will already have used these standards. New team members can “google” and learn for themselves using existing resources. Existing team members wonʼt have to develop those trainings. The easier it will be for existing team members to help ourselves. B. TEST 2: Can I (as this user-persona) use this GitHub capability (feature/ function) to improve my daily workflow? How would I use these capabilities to address my most common pain points? What do you mean? What do I understand? What is confusing? What could I set up myself? What would I need to still to learn? What would I need help from others to do? What would be most time-saving about this? Why? What would be most time-consuming to learn/implement? Why? What doesnʼt this do (or what else would I need?) to improve the quality of my workflow and the quality of my daily work life? Do I like this? Is it realistic? Why is this an important user test of the native GitHub Continuous Integration Prototype? We need to rule in/out which capabilities we will implement to remove pain points. Constrain our reboot or retooling to the month of May. Imagine you lose the dedicated team time and want to be standard-consistent and as independent as possible. Picture 3 new team members starting in June (Data Scientist, Modeler, Health Economist) Submit R21 Manuscripts to close it out in early June. How can we meet our open-science standards for our data pipeline? When can we achieve it? What do we need to do to achieve it? Support new COVID-19 release by Oct. Note that this is with new team members. Consider our other partners that all want to collaborate or help (11+, Iʼm not sure this is all - notice anything about this list?…): MITRE - Synthea and Simulation Models Google/Harvard - Modeling and AI Duke University - PSD University of Utah - PSD University of Denver - PSD/Re-AIM University of Wisconsin/Harvard - PSD/Engineers in Implementation Science University of Queensland - PSD/Emergency Medicine University of Rochester - PSD/Hospital in Home SUNDIR/Stanford - PSD Mission 401/Primary Care - PSD Supercomputing Clinical Care Pathways - Oakridge National Labs, Berkeley Picture supporting Modeling to Learn again sometime during this period… Consider the possibility of MTL Hawaii starting toward the end of this period. TEST 3. Validate Persona Cognitive Interview results against our Priorities and Open Issue Tasks Thursday Afternoon - Observe and Analyze from your user POV B. Review the May Epic R21 and 1192 &amp; 1220 goals and Sorted List of Open Issues What we should strive to fully implement in May to get the highest yield improvements in Team PSD workflow. Where is the biggest bang for your userʼs [motivational] buck? C. Which workflow should we set up/implement first (adds the most value, improves the most downstream; analogy our root level directory)? Why is that the most important workflow to set up first? Why would it save the most time in May? Why would it save the most effort in general (typical day)? What paint points does it address? What part of the SOP/Manual/Document tracker does it address? Is it “root” enough to avoid rework? What are the downstream benefits of starting with this? What are the risks of starting with this? D. How might we set up that workflow? Who needs to learn what? Plans for learning by user-type/workgroup based on the highest yield (for lightest lift): What is standard and we can learn it using existing trainings online? What needs to be sorted out next to integrate this into Team PSD? Friday - Synthesize Refine plans for divvying up learning and set up tasks to implement Team PSD-specific prototypes for user-testing next week. Weʼll use our Personas to develop Team PSD-specific Tests of our workflow. 3.4 Day 4: Team PSD 2.0 10AM today: Post Cognitive Interviews results for TEST 1 and for TEST 2 to Teams 1PM today: #1192 &amp; #1220 &amp; Dependency Post-Mortems in the language of CI “Song” for building the Railroad…Metaphor Gandy Dancers used their songs to build the railroads for well over 150 years. And, railroads supported other development, innovation and wealth (e.g. Stanford University). But, not only were gandy dancers ultimately replaced, the railways themselves in large-part were ultimately were technologically outgrown (i.e., is Stanford known as one of the most prominent railroad universities in the world?) Team PSD is outgrowing our unscalable workflow! We will learn this together (mutual learning) as we always do :) How sure am I that we have to better integrate existing coding standards to survive? A. The threat: Our only cover is daylight. Part 1: Look at how normed this is… COVID19 Modeling Uncertainty - All available, but “wrong” vs… COVID19 Pre-prints, Communication Response Time &amp; Data Availability - Not available COVID-19 Open Science Framework Example (normed) Part 2: We have a way forward…many grants cannot continue and staff are being furloughed. B. The opportunity: The community is there to support us finding our TeamPSD “songs.” Look at how normed this is… Quick Start Guides https://developer.github.com/apps/quickstart-guides/using-the-github-api-in-your-app/ Support https://support.github.com/ Probot Repo https://github.com/probot/probot Virtual Conferences https://githubsatellite.com/schedule/ C. Put in a values consistent way: We are the Leads in this space and people want to know how they can do this too! The list of mentees, senior scientist that want to retrain and partners that want to help is long… We are using 7 Team PSD user personas to test native GitHub Continuous Integration prototypes: Reviewing Cognitive Interview results elicited diverse mental models about the prototype training and the prototype capabilities. *These were all present before our workshop, we are trying to gain new empathic understanding of each user type. Huge time-savings! Reported range for GH Apps 1.5 - 3 hours inclusive of cognitive interviewing. User Point of View (POV) Problem Statement, Team PSD doesnʼt scale. Team Personas Team Position Description (PDs) Design Workshop “TO BE” Key Words: “Automate” “Shared language” “See/Test” “Integrate” (simplify) **“Increase time for/Focus** on transparent Team PSD Science” (not just our MTL intervention) Design Workshop “AS IS” Key Words Not using our tools/platform correctly, why? The team doesnʼt know how… *Upskill, so we can “Speak the same language!” Learn more about our diverse Team PSD user-types and their mental models. “Google for yourself” - Use of existing standards are empowering! time-saving! “Simplify to existing standards” - Key to onboarding new members &amp; staying current to collaborate, retain funding. Generally (Macro): Upskilling refers to the expansion of team memberʼs capabilities and employability to fulfill team needs in a rapidly changing economy (e.g. OSF, COVID-19 &amp; the scientific landscape). Specifically (Micro): Upskilling is not the same as reskilling…An upskilling effort, is a comprehensive initiative to convert, and further develop, applicable team knowledge into more productive team results. Coming out of this workshop, our may_epic priority is the Team PSD 2.0 release (#1192 &amp; #1220), with critical focus on wrapping up the R21 These are our steps: Clarify why the team needs new skills, Identify the skills that are most valuable, Develop the most feasible/viable plan for how the team will obtain the necessary skills, using our personas Prototypes: generic GitHub prototypes, followed by top-priority Team PSD-specific prototypes next week Train to scientific and industry standard skills through technology-enabled learning in the existing coding/GitHub ecosystem Synthesize into a new “root” Team PSD repo (SOP continuously integrated, deployed and documented; manual &amp; document tracker) Our Team PSD Manual Design Thinking Workshop is confronting our individual assumptions to design better solutions. The payoff can be immense in team results, overall quality of work life, and increased individual and team opportunities. Thursday &amp; Friday Outline “Thereʼs an app for that!” 1192 &amp; Dependent Issues Process Post-Mortem Using new shared GitHub “CI” language/understanding, how might we (HMW) enlist a native GH feature to solve 80% of our pain (upstream &amp; downstream?), what can be and should be done in May? who will learn what new skills to develop the Team PSD-specific prototype for user testing? Why? what is the **user-centered hypothesisv you are trying to reject/validate with your prototype (minimal viable product or “MVP”) 1220 &amp; Dependent Issues Process Post-Mortem Using new shared GitHub “CI” language/understanding, how might we (HMW) enlist a native GH feature to solve 80% of our pain (upstream &amp; downstream?), what can be and should be done in May? who will learn what new skills to develop the Team PSD-specific prototype for user testing? Why? what is the user-centered hypothesis you are trying to reject/validate with your prototype (minimal viable product or “MVP”) what metrics will we use next week to evaluate our user-centered hypotheses about our Team PSD-specific prototypes? Friday Finalize One pager of what we are doing in the team Language map Git YAML Node.js CSS Docker .html .sql .r Repo map: Everything MTL “mtl” describe, detail (Sim UI, SEE &amp; SAY, Models, model &amp; data documentarian) (1220) - 100% open source (get the help!) Everything Team PSD - team document how to “teampsd” (1192) - 100% “living document” and “self-help” Team PSD Open Science disseminate scientists &amp; VA??? mtl_code plus OSF (research scientists?) Internal VA Enterprise (operations VA) teampsd - set up SOP build for repo What should we do first, why? capabilities Who needs to learn what? training What metrics will we use next week to evaluate our user-centered hypotheses about our Team PSD-specific prototypes? 3.5 Day 5: Team PSD Personas and Minimum Viable Products (MVPs) 8AM: Part I &amp; II Together 9AM: Part III &amp; IV On your own 12:30: Check-in 2-4PM: Part V Review and Clarify next steps together Part I: Using the GitHub Continuous Integration (CI) language today. A. What is the purpose of a shared language? Shared understanding. Who has translated between two languages before. What are the challenges? What does it feel like (ups &amp; downs) to be a translator? B. Artifacts from Day 4 P.I. Persona (&amp; Platform Manager): Knew we needed to be headed to end- to-end open science-workflow and both have the mental model that we have been headed here the whole time. [clouds] PI knows (knew) that we have team members who understand that a teamʼs full use of continuous integration (CI) and deployment (CD) and/or GitHub is so basic for people who do what we do, that the fact that we do not have this in place is demoralizing and alarming! But, PI did not realize that we also have some team members still just grasping this reality due to lack having the shared language and understanding of these standard capabilities. P.I.: Wants the team to be resourceful and responsible for learning together how to align Team PSD according to existing standards. **Part II: No, really…we must use the GitHub Continuous Integration (CI) language TODAY. And, we must continue to use our user personas to test our assumptions.** **A. *WHY is it urgent that we retain our user persona POV as we move into our HMW (how might we) MVP learning, development &amp; testing?** We must locate ourselves in our team of users and assume we are HIGHLY likely to not really be understanding each personas WHYs, and not really understanding the GitHub/CI standard HOWs. B. Review this “HOW” and “WHY” Exchange from end of the day 4: P.I. (Lindsey): “Well, SQL Programmer/Data Engineer persona (Ash) thatʼs an important point. But, thatʼs not quite what Principal Investigator (I) meant for the about the order of file standards vs setting up actions, in what I heard our Data Analyst/Technical Writer (Anthony) proposing for him that I think may also save a ton of HQ workgroup time in May… [Principal Investigator clarification with SQL Programmer/Data Engineer persona about the role of Facilitator/Educators (Jane &amp; Debbie)] [addition of his own understanding from Sim UI Designer/Developer (James) persona about linking out to files]. Well, Sim UI Designer/Developer (James), thatʼs not quite what I heard SQL Programmer/Data Engineer (Ash) saying either, I think we might be starting to fragment out in our shared understanding of the how.” Sim UI Designer/Developer (James): “It seems like I never quite understand you.” C. What do you notice about this exchange? Lots of personas involved here…what do we know about the differences in these personas? Focus on the WHY for HQ, represented by PI here, being discussed with team members who arenʼt in that workgroup. Conversation loses shared understanding related to clarifying the HOW (order of operations, questioning the assumptions of whether we need Actions to solve 80% of HQʼs pain points or whether an App to enforce .md style may suffice for root tasks and pain points. Active listening to elucidate and clarify misunderstandings across persona mental models, leads a team member to reflect in my understanding vs. PI understanding. What does this feel like, does it feel as fun as a “song?” This type of work is common, and these types of conclusions need to be questioned. Pull us back to maintain the safety of our Empathic POV How do personas help us with this? Clarify mental models/assumptions that need testing. Move us to consider “user needs” not just our own. How do MVPs help us with this? “Fail fast &amp; cheap” testing key assumptions before proceeding Walk before you run…Really…weʼre just starting to roll our sleeves up to get to the bottom of this… Team PSD members need to take individual responsibility for trying to understand whatʼs really happening at the level of the team learning about each personaʼs WHYs and Team PSD members need to enlist individual resourcefulness standard language Summary of Day 4ʼs Review of TEST Cognitive Interview - Capabilities of the GH CI Protoype: We have more learning &amp; mental modeling work to do related to our Continuous Integration (CI) HOWs Part III. How do persona tests of MVPs help us reduce risk and start using Standard Language (note: not shared…universally standard)? A. What is the purpose of an MVP? Reduce risk while you increase return on investment (for team time spent) by building only what is necessary. B. How do you define whatʼs necessary? “What is necessary” means the smallest possible version (prototype) that can be used to run a meaningful experiment to test key hypotheses and determine whether to continue investment. **_Overview - How/Why** First, clarify our assumptions about our user personas._ Second, use how/why laddering to determine our “how might we” MVPs to test our hypotheses. Why do this? How should we do this? C. Using your own user persona, edit the key example MVP hypotheses to your persona. Example 1: How does this workgroup work together now (people, platforms &amp; processes)? Why do we assume that it works this way? We will assess this by reviewing my one page LucidCharts map of my Workgroup (see Lindseyʼs examples) Example 2: How does this workgroup interface with Team PSD now (people, platforms &amp; processes)? Why do we assume that it works this way? We will assess this by reviewing my one page LucidCharts map of Team PSD (see Lindseyʼs examples) *INTEGRATE IF YOU CAN. First, clarify our assumptions about our MVPs. D. How Team PSD/Workgroup/Persona would use it definitions (yes, look it up, but answer according to your user persona). Standard Language: What else should be on this list? App Action API Webhook Git LucidCharts YAML .md CSS repo branch style continuous integration continuous deployment documentation root directory E. Prototype Review: Review the GitHub Apps and the GitHub Actions. Using your own user persona, edit the key example MVP hypotheses to your persona. How Team PSD/Workgroup/Persona would use it definitions (yes, look it up, but answer according to your user persona). Using your own user persona, edit the example MVP (GH App &amp; Action) hypotheses to your persona. Example 3: How might we do X? Why do we assume it will it solve 80% of my user personaʼs pain points? We will assess this by developing ____ &amp; measuring ____? Example 4: How might my user persona learn to work this way? Why do we assume they need to learn it to solve 80% of their pain points? We will assess this by developing ____&amp; measuring ____. F. How would you develop user-centered hypotheses for the Apps or Actions you selected? Keys for our User-Centered MVP hypotheses: Aligned with our major goal to implement our most solve our scaling pain points. An MVP is built with minimal time investment and features, focused on a viable solution. It’s the foundation upon which to iterate. G. Map your understanding functionality requirements of #1192 &amp; #1220 to personas and MVPs. First, identify our assumptions (use your cognitive Interview results) and write hypotheses to test them. What exactly is the smallest thing that we can build to test this hypothesis? What else might we need to know to test this hypothesis and reduce risk? The metric we select, will help us to learn whether our design and learning plan is going the right direction. Part V: AFTERNOON TOGETHER Synthesize Refine plans for divvying up learning and set up tasks to implement Team PSD-specific prototypes for user-testing next week. Weʼll use our Personas to develop Team PSD-specific Tests But first, we need to be able to talk to one another in the language of continuous integration. Maps as Prototypes Repo maporder of priorities: Team PSD Open Science disseminate scientists &amp; VA??? mtl_code plus OSF (research scientists?) Internal VA Enterprise (operations VA) teampsd - set up SOP build for repo Need HQ to set up quickly to effectively engage Jane &amp; Debbie (1192) Everything Team PSD - team document how to “teampsd” (1192) - 100% “living document” and “self-help” With help from Forio &amp; Dev: Everything MTL “mtl” describe, detail (Sim UI, SEE &amp; SAY, Models, model &amp; data documentarian) (1220) - 100% open source (get the help!) What is the purpose of an MVP? Reduce risk while you increase return on investment (for team time spent) by building only what is necessary. How do you define whatʼs necessary? “What is necessary” means the smallest possible version (prototype) that can be used to run a meaningful experiment to test key hypotheses and determine whether to continue investment. First, clarify our assumptions about our user personas (HOW/WHY) Second, identify our assumptions and write hypotheses to test them (HOW/ WHY). What exactly is the smallest thing that we can build to test this hypothesis? What else might we need to know to test this hypothesis and reduce risk? B. Review the May Epic R21 and 1192 &amp; 1220 goals and Sorted List of Open Issues What we should strive to fully implement in May to get the highest yield improvements in Team PSD workflow. Where is the biggest bang for your userʼs [motivational] buck? C. Which workflow should we set up/implement first (adds the most value, improves the most downstream; analogy our root level directory)? Why is that the most important workflow to set up first? Why would it save the most time in May? Why would it save the most effort in general (typical day)? What paint points does it address? What part of the SOP/Manual/Document tracker does it address? Is it “root” enough to avoid rework? What are the downstream benefits of starting with this? What are the risks of starting with this? D. How might we set up that workflow? Who needs to learn what? Plans for learning by user-type/workgroup based on the highest yield (for lightest lift): What is standard and can we learn it using existing trainings online? What needs to be sorted out next to integrate this into Team PSD? "],
["4-team-psd-2-0.html", "Chapter 4 Team PSD 2.0 4.1 Synthesize Participatory Learning and Participatory Design 4.2 Participatory Learning and Design at Scale 4.3 Screencast Videos - No Audio 4.4 YouTube Video Library", " Chapter 4 Team PSD 2.0 User-centered participatory learning and design of Team PSD 2.0 Team PSD 2.0 is more scalable due to continuous integration, deployment and documention. We aim for a completely free, accessible, transparent and reproducible workflow (aka “open science”). Our mission to improve how healthcare quality improvement decisions are made enlists diverse team members and partners. We want to empower effective contributions from all potential stakeholders. 4.1 Synthesize Participatory Learning and Participatory Design Team PSD already developed Modeling to Learn to scale nationally in the Veterans Health Administration. The participatory learning principles we scaled in Modeling to Learn are: equitable access to resources mutual learning shared decision-making 4.1.1 Schedule/Process Schedule: Team PSD is using our may_epic to reboot Team PSD. Week 1: HQ, quant and Sim UI/Model workgroups develope user personas. Week 2: HQ, quant and Sim UI/Model develop hypotheses for testing prototypes (or fast and cheap minimum viable products) for these user personas. During week 2, we will use prototyping with personas to identify the upgraded/integrated/automated workflows that follow the pareto principle. To maximize the value of what we learn to build, we are identifying CI/CD fixes at a root level (20%) that will solve our 80% of our users’ workflow painpoints. Week 3: HQ (#1192 Team PSD Manual) and Quant (R21 Wrap-up) set up their 20% Team PSD 2.0 workflow independently. Week 4: Finish user persona/testing work. In June, we launch our pilot of Team PSD 2.0 with more Team PSD workgroups. Team PSD 2.0 Process going forward for monthly sprints/epics week 1: user-centered hypotheses week 2: clarifying assumptions with an user-centered MVP hypothesis test week 3: review of the results of user persona testing of your MVPs (with concurrent video and retrospective verbal) week 4: review the user-persona artifacts mindfully and empathically to discover new understandings you might have missed or still need to learn. 4.1.2 Persona and Prototyping User-centered hypotheses test assumptions that include user training needs. User points of view (POV) of our ‘limited Team PSD scale’ problem means that upskilling user training costs must be tested. 4.1.3 Team PSD how to resources: How to make a user-centered videos (Team PSD-specific) videos of your prototypes (‘minimum viable products’). 4.2 Participatory Learning and Design at Scale 4.2.1 Instructions Make user-persona videos testing Team PSD prototypes (aka MVPs: ‘minimum viable products’). 4.2.2 Principles for Participatory Design Artifacts Scale We want to develop and test prototypes iteratively and asynchronously. We are using the GitHub platform to continuously integrate distributed Team PSD contributions. This means: Users test, produce artifacts, and add them to the Team PSD library to be used by multiple prototype developers. Prototype developers review artifacts iteratively (by user) and asynchronously (on their own without the user). All our Team PSD prototype user test artifacts include user learning (‘upskilling’). Learning Team PSD processes include participatory learning. Prototyping includes individual learning from existing online trainings. We are upskilling to improve scale across our nationally distributed team and array of partners. Continuous integration of Team PSD universal standard languages. 4.2.3 Methods for these Design Artifacts We adapted cognitive think-aloud protocols to scale. We assess usability and user experience. We enlist mixed-methods (qual + quan). These are the instructions for passive screen video observation of usability. 4.2.4 Context - Why this is critical for Team PSD 2.0 to scale? To scale Team PSD processes, we evaluate the usability and user experience of Team PSD prototypes. Passive Screen Video Observation Usability (quantitative MVP tests) This test is the concurrent think aloud protocol to detect problems with MVP assumptions. Prototype developers gain re-susable insights into the users (through the library). Users don’t have to think about producing these scalable artifacts (just upload). These files are named with this convention “date_skill_training_user” e.g., “2020_05_13_git_ch1_busy_pi” Verbalization User-experience (qualitative MVP tests) This test is the retrospective think aloud protocol to detect problems with MVP assumptions. Learning task performance. We need distributed Team PSD users to learn at scale. All prototypes are teaching our learners a skill they need to contribute to the team. As we upskill, we continuously integrate prototypes, which scales learning and improvement across Team PSD. 4.3 Screencast Videos - No Audio 4.3.1 PC 4.3.1.1 Record any window on your PC. The Game DVR feature can capture any application’s window. Press Windows + G in any application on Windows 10. Look for the Game Bar that will appear. Select “Yes, this is a game” even if the application isn’t a game. image Reminder: Protect your privacy and only include information that is relevant for Team PSD prototyping. 4.3.2 Mac 4.3.2.1 Record any window on your Mac. Press Shift-Command-5. The Onscreen Controls will appear. Once the Onscreen Controls appear, click on one of the buttons with the record circle in the bottom right (4th icon from the left - Record Entire Screen or 5th icon from the left - Record Selected Portion) Click the down arrow under Options, located next to the record button. Under Microphone, select none to turn off audio recording. Under Options in the Onscreen Controls, adjust the recording window, setup a Timer, and where to Save To your recording. In the Menu Bar, click the Stop Recording button or press Command-Control-Esc (Escape) to stop recording. image Reminder: Protect your privacy and only include information that is relevant for Team PSD prototyping. 4.3.3 Purpose: Our Team PSD 2.0 User and Prototype Design Libraries Participatory design helps our team to scale Team PSD improvements. We identify: a) how team users learn, b) how learning differs by skill, c) how trainings are used to learn, and d) how this changes over time. Prototyping is asynchronous and distributed: Team PSD users learn and prototype when it is best for them. Team PSD MVP developers review artifacts when it is best for them. Team PSD prototypes are iteratively integrated during design and user testing. Design artifacts are machine and human readable for use across the team now and in the future. Reference: van den Haak, Maaike, De Jon, Menno, Schellens, &amp; Peter Jan. (2003). Retrospective vs. concurrent think-aloud protocols: Testing the usability of an online library catalogue. Behavior &amp; Information Technology, 22. https://doi.org/10.1080/0044929031000 4.4 YouTube Video Library Add to the Team PSD 2.0 YouTube Video Library Team PSD user persona video “cognitive think alouds” (CTAs) started with the Team PSD 2.0 Reboot in May 2020. - Our Open Science Commitment: Team PSD Participatory Learning, Design and Research at Scale 4.4.1 Instructions Post user persona videos testing Team PSD prototypes (aka MVPs: ‘minimum viable products’) to YouTube. 4.4.2 Step 1 - Create a Google Account If you don’t already have an account Select this link to create a Google account https://accounts.google.com/SignUpWithoutGmail - A Gmail is not required to sign up. - This email is only used to login and will not be public. - Uploaded user persona videos will be posted under the Brand Account LZPhD. 4.4.3 Step 2 - Share Email with Brand Account Manager Share the email associated with your Google account with a brand account manager to process an invitation. A brand account manager is any manager that already has access to the YouTube channel. Communicate through Microsoft Teams. 4.4.4 Step 3 - Manage YouTube Invitation Login to your Google account Select this link https://myaccount.google.com/brandaccounts Click Pending invitations. Select LZPhD. Accept invitation. Scroll down: “Act as LZPhD on”: Select the YouTube red icon. Navigate to the inbox associated with your Google account. You will see a confirmation in your inbox that reads, “You are now a manager of LZPhD”. Select the new email. You are now a manager Congratulations! 4.4.5 Step 4 - Upload User Persona Video Select Get started. Select the YouTube red icon. Your YouTube dashboard will open up. Navigate to the top right and select your circular profile pic. From the drop-down menu, select switch accounts. Select LZPhD. On the top right, Select the video camera + icon (Create). Select Upload video. Find the user persona video file you’d like to upload. 4.4.6 Step 5 - Video Details During Upload Use this naming convention “date_skill_training_user” ex: “2020_05_13_git_ch1_busy_pi” A description is not necessary at this time. No playlist. Audience - Select, Yes, it is made for kids. This will remove any advertisements. Click Next advance to next screen Click Next, no video elements at this time. Visibility - Select Unlisted only people with the link can see it. Click Save and your video will continue processing. You can safely logout of YouTube when your screencast is fully uploaded. 4.4.7 Step 6 - Speed Up or Slow Down YouTube Viewing While viewing your user persona video in YouTube, click the gear icon located on the bottom right. Select the “Speed” option. Choose a range of speeds. "],
["5-ms-teams.html", "Chapter 5 MS Teams 5.1 Quick Start Guide 5.2 Additional Tips/Functions", " Chapter 5 MS Teams TeamPSD and the VA are both using Microsoft Teams as their main communication platform. TeamPSD is using the Free Version of Microsoft Teams so the entire team can get used to it as the VA begins to roll it out system-wide by early August. 5.1 Quick Start Guide To review the basics of Microsoft Teams, check out their Quick Start Guide. This guide will help you learn the basic user interface functions of Microsoft Teams (Free version or VA) such as: Signing In Manage your profile settings Choose/browse channels Start a meeting or call Start a new conversation thread Reply within a message/conversation thread @ Mention someone Start a 1:1 or small group chat Add/Share/Work with Files and more! 5.2 Additional Tips/Functions 5.2.1 Switch Organizations To switch out of an organization: Click on the organization you are currently in, located next your profile picture &amp; name. To switch out of the organization, click on the organization you want to switch into. 5.2.2 Channel Meetings To know where a meeting call is being held in a channel: Look to see the purple video icon next to a channel’s name. image 5.2.3 Edit Message/Reply To edit a message: Drag your cursor over to an existing comment and click on the 3 dots next to the 6 “react” emojis. Select the pencil icon Edit button. image After finishing your edit, select the check mark button to publish or the “x button” to exit out of the draft. 5.2.4 Markdown Teams is Markdown friendly! Try using basic markdown such as bolding or italicizing text in a comment/reply. 5.2.5 Meeting Call in Context Tp start a meeting call within the same conversation thread to keep context: In the conversation thread, click on the reply button. image Click on the video icon button to begin a call. image 5.2.6 “React” to a Comment To “React” to a comment or reply to acknowledge it: Drag your cursor over to an existing comment and select 1 of the 6 emojis to “react” to it. 5.2.7 Link a Comment/Discussion/File To link to a specific thread or comment or file: Drag your cursor over to an existing comment and click on the 3 dots next to the 6 “react” emojis. Click on hyperlink icon copy link button to copy the link to the location of that thread/comment/file. "],
["6-github.html", "Chapter 6 GitHub 6.1 Standard Operating Procedure (SOP) 6.2 GitHub Repositories 6.3 Basics of GitHub 6.4 Style 6.5 ZenHub for Project Management 6.6 Files 6.7 Branches 6.8 Pull Requests", " Chapter 6 GitHub TeamPSD’s main platform for project tracking is GitHub + the extension of ZenHub for project management. We :heart: GitHub for sharing the same commitment and values in having a free and open science workflow. 6.1 Standard Operating Procedure (SOP) Before beginning to contribute to TeamPSD’s workflow, ensure that you read through our Standard Operating Procedures (SOP) to understand our rules and policies and orient to our team using GitHub. 6.2 GitHub Repositories 6.2.1 Non-VA Repositories lzim/teampsd (Public) This repository contains TeamPSD resources and track the work that the team uses internally (i.e. Bookdown, document_team, depend_products, etc.) lzim/mtl (Public) This repository supports Modeling to Learn and contain the content in describe_learners, detail facilitators, and SIM/Model Code. lzim/sim (Public) This repository supports the Modeling to Learn Simulation User Interface plaform, Forio Epicenter, &amp; and model files from Vensim DSS. lzim/research (Private) This repository holds the analysis for the (R01, IIR, R21) and disseminate science. lzim/mtl_team_tracker (Private) This repository is used by VA Clinicians and Modeling to Learn Co-facilitators to track team progression. 6.2.2 VA Enterprise Repositories “va/mtl” (operations pipeline) This repository stores the operations code used to support Modeling to Learn teams. “va/research” research pipeline) This repository holds the backend code that needs to stay internal for our grants. 6.2.3 Workflow teampsd_2 0_organization_workflow 6.3 Basics of GitHub To go through a quick overview on repositories, branches, commits, and opening/merging pull requests, click here. For a glossary of GitHub terms, click here. 6.4 Style We use R Markdown format for syntax and style which you can refer to here (ADD HYPERLINK). Use a human and computer readable format to name files, meaning all lowercase, underscores, and dates (as necesary) with a name that will be meaningful to whoever reads it. We will update with links to style guides. 6.5 ZenHub for Project Management Our team uses the GitHub Google Chrome extension, ZenHub, for project management. 6.5.0.1 ZenHub Flow - Issue Card To create an issue card, begin here and follow the flow to create and maintain your issue card. 6.6 Files 6.6.1 Create and Edit Files To create files, choose the branch or folder you want and click “Create New File.” To view the file’s code, simply click “Raw” in the top right corner of the file, next to “Blame” and “History.” To view comments that you/others have added, you can click on “History” and then check for an “ellipses” symbol. This symbol indicates that a comment has been added to the commit. To see the comment, click on the ellipses. 6.6.2 Upload Files To upload files, choose the branch or folder you want and upload the file. The file will be named as it was in your computer, so make sure to give the file a name according that is simple and reflective of its contents to anyone that reads the file name. 6.6.3 Download Files Files cannot be downloaded individually - you have to download the entire branch. You can find the green “Download” button on the main page of each branch. 6.7 Branches 6.7.1 Create and Edit Branches Open up the specific file you want to edit. Create a new working branch and name it using all lowercase, no spaces (use underscores), and your initials - i.e. “facilitation_guide_sp”. Make sure you’re in the branch you just created instead of the original branch. Click the pencil icon to edit. Edit the file and add comments on changes you made. Click on “Commit”. 6.8 Pull Requests 6.8.1 Create and Edit Pull Requests Go to “Pull Requests” and click on “New Pull Request”. The “Base” branch should be the original branch (most likely “master”). The “Compare” branch will be the branch you created. Click on “Create a New Pull Request”. Add “Reviewers” and click on “TeamPSD” for the “Project section. Click on”Create Pull Request\". To add line specific comments, click on “Files Changed”. Hover your mouse in front of the specific line in question and a blue plus sign will appear. Click on that and add your comment. "]
]
